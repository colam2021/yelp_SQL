Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.


Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000  
iii. Category table = 10000 
iv. Checkin table = 10000 
v. elite_years table = 10000 
vi. friend table = 10000 
vii. hours table = 10000 
viii. photo table = 10000 
ix. review table = 10000 
x. tip table = 10000 
xi. user table = 10000 
	
2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id: 10000 
ii. Hours = business_id: 1562 
iii. Category = business_id: 2643 
iv. Attribute = business_id: 1115
v. Review = id: 10000, Foreign Key: business_id: 8090, user_id: 9581 
vi. Checkin = business_id: 493
vii. Photo = id: 10000, Foreign Key: business_id: 6493 
viii. Tip = Foreign Key: user_id: 537 , business_id: 3979 
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	SQL code used to arrive at answer:
    
    SELECT id, name
    FROM user
    WHERE id is null
    OR name is null
    OR review_count is null 
    OR yelping_since is null
    OR useful is null
    OR funny is null
    OR cool is null
    OR fans is null
    OR average_stars is null
    OR compliment_hot is null
    OR compliment_more is null
    OR compliment_profile is null
    OR compliment_cute is null
    OR compliment_list is null
    OR compliment_note is null
    OR compliment_plain is null
    OR compliment_cool is null
    OR compliment_funny is null
    OR compliment_writer is null
    OR compliment_photos is null;
    
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2	    avg: 0.0144
		
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 
		
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		
5. List the cities with the most reviews in descending order:  

	SQL code used to arrive at answer:
	
    SELECT city , sum(review_count) as most_review
    FROM business
    GROUP BY city
    ORDER BY sum(review_count) desc;
	
	Copy and Paste the Result Below:
	
    +-----------------+-------------+
    | city            | most_review |
    +-----------------+-------------+
    | Las Vegas       |       82854 |
    | Phoenix         |       34503 |
    | Toronto         |       24113 |
    | Scottsdale      |       20614 |
    | Charlotte       |       12523 |
    | Henderson       |       10871 |
    | Tempe           |       10504 |
    | Pittsburgh      |        9798 |
    | Montréal       |        9448 |
    | Chandler        |        8112 |
    | Mesa            |        6875 |
    | Gilbert         |        6380 |
    | Cleveland       |        5593 |
    | Madison         |        5265 |
    | Glendale        |        4406 |
    | Mississauga     |        3814 |
    | Edinburgh       |        2792 |
    | Peoria          |        2624 |
    | North Las Vegas |        2438 |
    | Markham         |        2352 |
    | Champaign       |        2029 |
    | Stuttgart       |        1849 |
    | Surprise        |        1520 |
    | Lakewood        |        1465 |
    | Goodyear        |        1155 |
    +-----------------+-------------+
    (Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities: 

i. Avon   

SQL code used to arrive at answer:

    SELECT stars, count(stars)
    FROM business
    WHERE city = 'Avon'  
    GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

    +-------+--------------+
    | stars | count(stars) |
    +-------+--------------+
    |   1.5 |            1 |
    |   2.5 |            2 |
    |   3.5 |            3 |
    |   4.0 |            2 |
    |   4.5 |            1 |
    |   5.0 |            1 |
    +-------+--------------+

ii. Beachwood  

SQL code used to arrive at answer:
    SELECT stars, count(stars)
    FROM business
    WHERE city = 'Beachwood'  
    GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
    +-------+--------------+
    | stars | count(stars) |
    +-------+--------------+
    |   2.0 |            1 |
    |   2.5 |            1 |
    |   3.0 |            2 |
    |   3.5 |            2 |
    |   4.0 |            1 |
    |   4.5 |            2 |
    |   5.0 |            5 |
    +-------+--------------+	
    
7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer: 
    
    SELECT id, name, review_count as total_reviews  
    FROM user
    ORDER BY review_count desc  
    LIMIT 3;
    
	Copy and Paste the Result Below:  
	
    +------------------------+--------+---------------+
    | id                     | name   | total_reviews |
    +------------------------+--------+---------------+
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald |          2000 |
    | -3s52C4zL_DHRK0ULG6qtg | Sara   |          1629 |
    | -8lbUNlXVSoXqaRRiHiSNg | Yuri   |          1339 |
    +------------------------+--------+---------------+
     

8. Does posing more reviews correlate with more fans? 

	Please explain your findings and interpretation of the results:
    
	Answer: No, posing more reviews does not correlate with more fans.
    
    Explanation:
    If there is a relationship between the number of reviews posted and the number of fans got, 
    then the two variables will move in the same direction.  
    The decrease of the number of fans will go hand in hand with the decrease of the number of reviews. 
    In this case, the top users will have more fans than the rest and vice versa.  
    However, we do not see such pattern in the table.  
    
    To elaborate on it, let’s look at the following User table.  It is a table of the Top 10 users that based on review_count in descending order.  
    It contains their id and names, number of review posted (review_count), and the number of fans they had.    
    
    First, we notice that review_count and fans do not move in the same direction.  If there were a positive relationship between these two variables, 
    users with the highest number of review posted should also have the most fans in the group. But this is not the case. 
    Quite the opposite, the top three users with the most reviews posted (Gerald, Sara, & Yuri) did not have the highest number of fans in the group.  
    By contrast, the bottom two users (Mimi and Christine) with the least review posted had more fans than most reviewers within the group.      
    
    In short, the two variables do not move in the same directions. 
    The increase of one does not guarantee the other will increase in the same fashion.  
    Therefore, there is no evidence of a relationship exists between the number of reviews posted and the number of fans got.
    
    +------------------------+-----------+--------------+------+
    | id                     | name      | review_count | fans |
    +------------------------+-----------+--------------+------+
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
    | -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 |
    | -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
    | -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
    | -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
    | --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
    | -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 |
    | -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
    | -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
    | -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
    ------------------------+-----------+--------------+------+

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, the word of "love" (count = 1780)is more than the word of "hate" (count = 232) in the reviews.

	SQL code used to arrive at answer:
     Number of the word "love":
     
        SELECT count (distinct text) as love
        FROM review
        WHERE text like ('%love%');
     
     Number of the word "hate":
      
        SELECT count (distinct text) as hate
        FROM review
        WHERE text like ('%hate%');

10. Find the top 10 users with the most fans: 

	SQL code used to arrive at answer: 
	
    SELECT id, name, fans    
    FROM user
    ORDER BY fans desc  
    LIMIT 10;
    
	Copy and Paste the Result Below: 

    +------------------------+-----------+------+
    | id                     | name      | fans |
    +------------------------+-----------+------+
    | -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
    | -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
    | --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
    | -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
    | -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
    | -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
    | -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
    | -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
    | -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
    +------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	Yes, the group of restaurants in Toronto with low ratings (2-3 stars) will be closed after 4 pm on Friday.
    On the hand, the group with high ratings (4-5 stars) opens from 6pm to 11pm on Friday night.
	      
ii. Do the two groups you chose to analyze have a different number of reviews?
    Yes, the group with high ratings (4-5 stars) have substantial more reviews on average than the group with low ratings (2-3 stars).
    The average review count is 41.0 for the high ratings group versus 28.7 for the low ratings group.         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	 
     Only up to a point. 
	 The group with low ratings are located in the Entertainment Distict. There are lots of people in this neighborhood on Friday night.
	 Restaurants are places for social gathering and important part of social life. 
     If restaurants are closed after 4pm on Friday evening, people cannot dine in and gather in
	 these restaurants. Users may not have chance to dine in and write a review, and affect their impression to these restaurants.
     That might contribute to the lower rating of these restaurants.
	 
	 By contrast, the group with high ratings are located in another neighborhood. Although they are not in the Entertainment District nor close to downtown, they
	 open on Friday night and cater to the public's social life. Hence, it is reasonable for these restaurants receiving high ratings.
	 
	 That being said, since there are limited number of restaurants in the data set, it is inconclusive to draw the conclusion. 
     We need more data to test the conjecture. 
	 


SQL code used for analysis:

	SELECT c.category,  
	CASE 
	WHEN b.stars >= 4 then '4-5 stars'
	WHEN b.stars >=2 then '2-3 stars'
	ELSE '1 star'
	END star_rating,
	count(b.id), b.neighborhood,b.address, b.postal_code,
	round(avg(b.review_count),1) avg_review_count,
	h.hours
	FROM business b
	INNER JOIN category c 
	ON  b.id = c.business_id
	INNER JOIN  hours h 
	ON b.id = h.business_id
	WHERE b.city = 'Toronto' and star_rating !='1 star' 
	and h.hours like ('Fri%')
	and c.category ='Restaurants'
	GROUP BY star_rating;  
		
	+-------------+-------------+-------------+------------------------+-----------------------+-------------+------------------+--------------------+
	| category    | star_rating | count(b.id) | neighborhood           | address               | postal_code | avg_review_count | hours              |
	+-------------+-------------+-------------+------------------------+-----------------------+-------------+------------------+--------------------+
	| Restaurants | 2-3 stars   |           3 | Entertainment District | 270 Adelaide Street W | M5H 1X6     |             28.7 | Friday|9:00-4:00   |
	| Restaurants | 4-5 stars   |           3 | Niagara                | 169 Niagara Street    | M5V         |             41.0 | Friday|18:00-23:00 |
	+-------------+-------------+-------------+------------------------+-----------------------+-------------+------------------+--------------------+

	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: 
    On average, those business (it is Japanese restaurants in this case) that are still open received higher star rating (4.2) than those that are already closed (2.0).
    
ii. Difference 2:
    On average, those business that are still open had more review count (48.0) than those that are already closed (5.0).     
         
         
SQL code used for analysis:

    SELECT b.state, c.category, b.is_open,  count(b.id) count_id, 
    avg(b.review_count) avgReviewCount, round(avg(b.stars),1) avgStars 
    FROM business b
    INNER JOIN category c 
    ON b.id = c.business_id
    WHERE c.category ='Japanese' and b.state ='ON'
    GROUP BY b.is_open; 

    +-------+----------+---------+----------+----------------+----------+
    | state | category | is_open | count_id | avgReviewCount | avgStars |
    +-------+----------+---------+----------+----------------+----------+
    | ON    | Japanese |       0 |        1 |            5.0 |      2.0 |
    | ON    | Japanese |       1 |        3 |           48.0 |      4.2 |
    +-------+----------+---------+----------+----------------+----------+
	

    3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

    I would like to identify factors associated with the number of fans that an elite user could have. 
    Everyone who has signed up for yelp can write reviews, but not everyone is an elite user. 
    Elite status is awarded by yelp and recognized by the yelp community. Elite users are experienced quality writers in the yelp community. 
    By looking into these elite users, we might identify impactful factors in building sizeable fans. 

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

    First, I need the elite_years table to identify the elite users. The “year” field is the year of a user 
    becomes an elite user. Based on this field and the “now” field from the SQLITE, I can determine the
    length of being an elite user. Then I can test if experienced elite users have more fans than new elite users.  
    
    Next, I need the user table. This table gives me two major aspects of information about the elite users. 
    One is about the usefulness of reviews. Will elite users build their fans be based on the usefulness of reviews they wrote? 
    The other aspect is the perceived personality of the elite users. The user table includes 11 compliment fields
    that are given to elite users. To some extent, these compliment fields like cool, cute, good writer, etc., 
    reflect the perceived personality of these elite users in the yelp community. Will these perceived personality be the building block of fans?
    However, I excluded profile and list after checking the results. These two compliments did not have much count. Also, the field of funny and cool
    seem to have the same data. So I excluded funny. As a result, eight compliment fields were used to represent perceived personality.
    To see the influence of these two aspects, I also created a calculated field of SixKeys_sum, which is the total count of 
    useful and five top compliment fields.

iii. Output of your finished dataset:
         
+------------------------+---------+-------------+-----------+------+--------------+-----------+--------+------+-----+-------+------+--------+-------------+--------+------+------+
| id                     | name    | Elite_since | Llite_Yrs | fans | review_count | avg_stars | useful | cool | hot | plain | note | writer | SixKeys_sum | photos | cute | more |
+------------------------+---------+-------------+-----------+------+--------------+-----------+--------+------+-----+-------+------+--------+-------------+--------+------+------+
| -lh59ko3dxChBSZ9U7LfUw | Lissa   | 2009        |        12 |  120 |          834 |      3.68 |    455 |  482 | 417 |   308 |  113 |    346 |       19089 |     24 |   17 |   35 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves  | 2014        |         7 |   80 |          178 |      3.64 |   1091 |  183 | 159 |   102 |   56 |     77 |        6672 |     79 |   13 |    5 |
| --Qh8yKWAvIP4V4K8ZPfHA | Dixie   | 2012        |         9 |   41 |          503 |      3.19 |     21 |   67 |  32 |    92 |   49 |     34 |        1770 |      6 |    4 |    3 |
| -fUARDNuXAfrOn4WLSZLgA | Ed      | 2010        |        11 |   38 |          904 |       3.6 |    141 |   13 |  14 |    37 |   21 |      5 |        1848 |     11 |    1 |    3 |
| -kO6984fXByyZm3_6z2JYg | Dominic | 2011        |        10 |   37 |          836 |      3.47 |     81 |   36 |  16 |    52 |   35 |     17 |        1659 |      1 |    0 |    5 |
| -50XWnmQGqBgEI-9ANvLlg | Lalena  | 2015        |         6 |   25 |          224 |      3.94 |    443 |   26 |  12 |    27 |    6 |     13 |        1581 |      4 |    1 |    2 |
| -a0LRFr94D9ohyBJCKVvXQ | Elaine  | 2011        |        10 |   18 |          332 |      3.26 |     19 |   22 |   4 |    21 |   11 |      9 |         602 |      3 |    0 |    3 |
| -hYYjAXSAa657rY0ANtTGQ | Kristen | 2016        |         5 |   15 |          428 |      3.32 |     45 |    8 |   2 |     4 |    5 |      5 |         138 |      5 |    0 |    0 |
| -aAgfEUH4UoFDRXZCfJSUA | Matt    | 2012        |         9 |   14 |          476 |      3.77 |     42 |   16 |   4 |    32 |   11 |      4 |         654 |      2 |    1 |    7 |
| -5e4VTnu_pR4Gpv3VSncaw | Justin  | 2014        |         7 |   13 |          177 |      3.51 |     46 |   15 |   6 |    13 |    6 |      9 |         380 |      3 |    1 |    1 |
| -dbWm5L_Ol2hZeLRoQOK7w | Mel     | 2012        |         9 |    9 |          156 |      3.78 |     92 |   14 |   5 |    14 |    5 |     12 |         568 |      1 |    1 |    4 |
| -0HhZbPBlB1YZx3BhAfaEA | Tasha   | 2014        |         7 |    8 |          250 |      3.81 |    106 |    5 |   1 |     5 |    5 |      2 |         372 |      0 |    0 |    3 |
| -d2daWmftYumOaYpbD5D8Q | Jia     | 2012        |         9 |    8 |          228 |      3.36 |     24 |    2 |   0 |     8 |    4 |      4 |         252 |      0 |    1 |    1 |
| -HLE-x7Lpkfprd6er-JFGg | Danial  | 2012        |         9 |    5 |          136 |      2.54 |     12 |    4 |   1 |     4 |    7 |      3 |         155 |      0 |    0 |    4 |
| -ga7pQvnJcMB1_pIapHQRQ | Tracy   | 2016        |         5 |    5 |           71 |      3.32 |      6 |    1 |   1 |     3 |    3 |      3 |          34 |      0 |    1 |    3 |
| -cvrhCPCKHUkEsDak_fY4g | Jamie   | 2014        |         7 |    4 |           95 |      4.08 |     15 |    3 |   3 |     8 |    2 |      3 |          34 |      0 |    0 |    0 |
| -9RU4LuI_TfYgv9rBijJoQ | Keith   | 2017        |         4 |    3 |           61 |      3.84 |     17 |    0 |   2 |     5 |    0 |      1 |          25 |      1 |    0 |    0 |
| -EWQZjRHAKMddHW_dZTvdw | Chris   | 2011        |        10 |    2 |           70 |      3.49 |     57 |    8 |   6 |     6 |   11 |     12 |         300 |      0 |    0 |    3 |
| --BumyUHiO_7YsHurb9Hkw | Sapna   | 2017        |         4 |    1 |           38 |      3.87 |      0 |    0 |   2 |     0 |    0 |      1 |           3 |      0 |    0 |    0 |
| -9SoHrhiiUVmx6-MkyR4RA | Brad    | 2013        |         8 |    1 |          182 |      2.92 |    212 |    3 |   0 |     2 |    4 |      4 |         450 |      0 |    0 |    1 |
| -GD0XVUKRj96vf6TP68Evw | Maung   | 2017        |         4 |    0 |           54 |      3.69 |      2 |    2 |   1 |     0 |    0 |      0 |           5 |      0 |    0 |    0 |
+------------------------+---------+-------------+-----------+------+--------------+-----------+--------+------+-----+-------+------+--------+-------------+--------+------+------+
        
iv. Provide the SQL code you used to create your final dataset:

SELECT u.id, u.name, MIN (e.year) as Elite_since, (strftime('%Y', 'now') - MIN(e.year)) as Llite_Yrs,
u.fans as fans, u.review_count as review_count, u.average_stars as avg_stars, u.useful as useful, 
u.compliment_cool as cool , u.compliment_hot as hot, u.compliment_plain as plain, u.compliment_note as note, u.compliment_writer as writer,
SUM (u.useful + u.compliment_cool + u.compliment_hot + u.compliment_plain + u.compliment_note +  
     u.compliment_writer ) SixKeys_sum,
u.compliment_photos as photos, u.compliment_cute as cute, u.compliment_more as more 
    
FROM user u 
INNER JOIN elite_years e
ON u.id = e.user_id

GROUP BY u.id
ORDER BY u.fans desc;



/* ======= */

select u.id
from user u 
where u.id in (
    select distinct user_id from elite_years
    where year between '2005' and '2008'
)